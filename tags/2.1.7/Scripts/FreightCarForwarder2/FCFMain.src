#!=WISH=
#* 
#* ------------------------------------------------------------------
#* FCFMain.src - FCF -- Main
#* Created by Robert Heller on Tue Oct 25 14:13:32 2005
#* ------------------------------------------------------------------
#* Modification History: $Log$
#* Modification History: Revision 1.5  2007/02/01 20:00:54  heller
#* Modification History: Lock down for Release 2.1.7
#* Modification History:
#* Modification History: Revision 1.4  2006/05/22 17:01:12  heller
#* Modification History: Updated make install
#* Modification History:
#* Modification History: Revision 1.3  2006/03/06 18:46:20  heller
#* Modification History: March 6 lockdown
#* Modification History:
#* Modification History: Revision 1.2  2006/02/26 23:09:24  heller
#* Modification History: Lockdown for machine xfer
#* Modification History:
#* Modification History: Revision 1.1  2005/11/04 19:06:38  heller
#* Modification History: Nov 4, 2005 Lockdown
#* Modification History:
#* Modification History: Revision 1.1  2002/07/28 14:03:50  heller
#* Modification History: Add it copyright notice headers
#* Modification History:
#* ------------------------------------------------------------------
#* Contents:
#* ------------------------------------------------------------------
#*  
#*     Model RR System, Version 2
#*     Copyright (C) 1994,1995,2002-2005  Robert Heller D/B/A Deepwoods Software
#* 			51 Locke Hill Road
#* 			Wendell, MA 01379-9728
#* 
#*     This program is free software; you can redistribute it and/or modify
#*     it under the terms of the GNU General Public License as published by
#*     the Free Software Foundation; either version 2 of the License, or
#*     (at your option) any later version.
#* 
#*     This program is distributed in the hope that it will be useful,
#*     but WITHOUT ANY WARRANTY; without even the implied warranty of
#*     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#*     GNU General Public License for more details.
#* 
#*     You should have received a copy of the GNU General Public License
#*     along with this program; if not, write to the Free Software
#*     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#* 
#*  
#* 

#* $Id$

package require Tk
package require BWidget
package require BWStdMenuBar
package require BWHelp
package require Fcfclasses
package require DWpanedw
package require snit
package require Splash
package require MainWindow

global ImageDir 
set ImageDir [file join [file dirname [file dirname [info script]]] \
			FreightCarForwarder2]
global CommonImageDir 
set CommonImageDir [file join [file dirname [file dirname [info script]]] \
			Common]
global HelpDir
set HelpDir [file join [file dirname [file dirname [file dirname \
                                                        [info script]]]] Help]

image create photo banner -file [file join $ImageDir banner.gif]
# Image used as a banner for all dialog boxes.
# [index] banner!image

image create photo DeepwoodsBanner -format gif -file [file join $CommonImageDir DeepwoodsBanner.gif]
# Deepwoods banner image.  Used in the splash screen.
# [index] DeepwoodsBanner!image

wm withdraw .

global argcTest IsSlave
set argcTest 0
set IsSlave 0

for {set ia 0} {$ia < $argc} {incr ia} {
  switch -glob -- "[lindex $argv $ia]" {
    -isslave* {
      set IsSlave 1
      incr argcTest
      fconfigure stdin -buffering line
      fconfigure stdout -buffering line
    }
    -* {
    	puts stderr "usage: $argv0 \[wish options\] -- \[-isslave\]"
	exit 96
    }
    default {
    }
  }
}




global HelpDir

proc SplashScreen {} {
  # Build the ``Splash Screen'' -- A popup window that tells the user what 
  # we are all about.  It gives the version and brief copyright information.
  #
  # The upper part of the splash screen gives the brief information, with
  # directions on how to get detailed information.  The lower part contains
  # an image banner for Deepwoods Software.
  # [index] SplashScreen!procedure

  splash .mrrSplash \
	-title {Model Railroad Freight Car Forwarder 2.0, Copyright (C) 2006 Robert Heller D/B/A Deepwoods Software Model Railroad Freight Car Forwarder comes with ABSOLUTELY NO WARRANTY; for details select 'Warranty...' under the Help menu.  This is free software, and you are welcome to redistribute it under certain conditions; select 'Copying...' under the Help menu.} \
	-icon banner -image DeepwoodsBanner -background {#2ba2bf} \
	-titleforeground white -statusforeground {black}
}

proc SplashWorkMessage {message percent} {
  global IsSlave
  if {!$IsSlave} {
    .mrrSplash update "$message" $percent
    update
  }
}

if {!$IsSlave} {
  SplashScreen
  update
}

SplashWorkMessage "Building Main window" 0


proc MainWindow {} {
  global CommonImageDir Main
  global LogWindow MainWindow

  wm protocol . WM_DELETE_WINDOW {CarefulExit}
  wm withdraw .
  wm title . "Freight Car Forwarder V2, using [package versions Fcfclasses] of Fcfclasses"

  global FocusNowhere Main
  set FocusNowhere [canvas .focusNowhere]

  pack [set Main [mainwindow .main]]  -expand yes -fill both
  $Main toolbar add tools
  $Main toolbar show tools
  $Main menu entryconfigure file New -state disabled
  $Main menu entryconfigure file Open... \
	-dynamichelp "Open and Load System File" \
        -command LoadSystem
  image create photo OpenButtonImage -file [file join $CommonImageDir open.gif]
  $Main toolbar addbutton tools open -image OpenButtonImage \
		-command LoadSystem \
		-helptext "Open and Load System File"
  $Main menu entryconfigure file {Save As...} -state disabled
  $Main menu entryconfigure file Print... -state disabled
  $Main menu entryconfigure file Close -command {CarefulExit}
  $Main menu entryconfigure file Exit -command {CarefulExit}
  set MainWindow [$Main scrollwindow getframe]
  pack [set LogWindow [text $MainWindow.text]] -fill both -expand yes
  $Main scrollwindow setwidget $LogWindow


}

MainWindow

set FCFCarsLoaded [expr ![catch {package require FCFCars} message]]
if {!$FCFCarsLoaded} {puts stderr "*** package require FCFCars => $message"}
set FCFTrainsLoaded [expr ![catch {package require FCFTrains} message]]
if {!$FCFTrainsLoaded} {puts stderr "*** package require FCFTrains => $message"}
set FCFIndustriesLoaded [expr ![catch {package require FCFIndustries} message]]
if {!$FCFIndustriesLoaded} {puts stderr "*** package require FCFIndustries => $message"}
set FCFDivisionsLoaded [expr ![catch {package require FCFDivisions} message]]
if {!$FCFDivisionsLoaded} {puts stderr "*** package require FCFDivisions => $message"}
set FCFReportsLoaded [expr ![catch {package require FCFReports} message]]
if {!$FCFReportsLoaded} {puts stderr "*** package require FCFReports => $message"}
set FCFPrintersLoaded [expr ![catch {package require FCFPrinters} message]]
if {!$FCFPrintersLoaded} {puts stderr "*** package require FCFPrinter => $message"}



proc UnPostMenu {menu} {
#  global errorInfo
#  puts stderr "*** UnPostMenu: errorInfo = $errorInfo"
  catch {
    upvar #0 $menu data
    $menu unpost
    focus $data(oldfocus)      
  }
}

proc PostMenuOnPointer {menu w} {
  set X [winfo pointerx $w]
  set Y [winfo pointery $w]

#  global errorInfo
#  puts stderr "*** PostMenuOnWidget: errorInfo = $errorInfo"
  $menu activate none
  $menu post $X $Y
  upvar #0 $menu data
  set data(oldfocus) [focus]
  focus $menu
}

proc SetBusy {w flag} {
  global FocusNowhere
  switch [string tolower "$flag"] {
    1 -
    on -
    yes {
        if {[string equal [grab current $w] $FocusNowhere]} {return}
	catch {array unset ::WatchList}
	SetWatchCursor [winfo toplevel $w]
	grab $FocusNowhere
    }
    0 -
    off -
    no {
	if {![string equal [grab current $w] $FocusNowhere]} {return}
	UnSetWatchCursor
	grab release $FocusNowhere
    }
  }
}

proc SetWatchCursor {w} {
  global WatchList
  catch [list set WatchList($w) [$w cget -cursor]]
  catch [list $w configure -cursor watch]
  foreach iw [winfo children $w] {
    SetWatchCursor $iw
  }
}

proc UnSetWatchCursor {} {
  global WatchList
  foreach w [array names WatchList] {
    catch [list $w configure -cursor "$WatchList($w)"]
  }
}
	
proc WIPStart {{message {}}} {
  global Main
  $Main wipmessage configure -text "$message"
  $Main setprogress 0
  $Main setstatus {}
  SetBusy $::Main on
  update idle
}

proc WIPUpdate {value {message {}}} {
  global Main
  $Main setstatus "$message"
  $Main setprogress $value
  if {$value >= 100} {
    SetBusy $::Main off
  }
  update idle
}

proc WIPDone {{message {}}} {
  WIPUpdate 100 "$message"
  update idle
}

Tcl8WorkInProgressCallback WIP WIPStart WIPUpdate WIPDone

proc LogMessage {type message} {
  global LogWindow

  switch -exact "$type" {
    :informational {
      $LogWindow insert end "$message"
      $LogWindow see end
    }
    :warning {
      tk_messageBox -icon warning -type ok -message "$message"
    }  
    :error {
      tk_messageBox -icon error -type ok -message "$message"
    }
  }
}

Tcl8LogMessageCallback Log LogMessage

proc ShowBanner {} {
  global LogWindow
  $LogWindow insert end "\n[TheSystem SystemName]\n\n" BOLD
  $LogWindow see end
  update idle
}

Tcl8ShowBannerCallback Banner ShowBanner

proc MakeSeed {} {
  set dtlist [split [clock format [clock seconds] -format {%y %m %d %H %M %S}] " "]
  set sum 0
  foreach i $dtlist {
    set ii "[string trimleft $i {0}]"
    if {"$ii" == {}} {set ii 0}
    incr sum $ii
  }
  return $sum
}  


proc LoadSystem {{fileName {}}} {
  global LogWindow Main
  if {[string length "$fileName"] == 0} {
    set fileName [tk_getOpenFile \
	-defaultextension {.dat} \
	-initialfile system.dat \
	-parent . \
	-title {Name of a system file to load}]
  }
  if {[string length "$fileName"] == 0} {return}
  if {[llength [info commands TheSystem]] > 0} {
    rename TheSystem {}
  }
  System TheSystem "$fileName" [MakeSeed]
  $LogWindow insert end \
	"$fileName loaded:\n"
  $LogWindow insert end \
	"[TheSystem SystemName] [TheSystem SessionNumber] [TheSystem ShiftNumber]\n"
  $LogWindow insert end \
	"[TheSystem NumberOfDivisions] Divisions\n"
  $LogWindow insert end \
	"[TheSystem NumberOfStations] Stations\n"
  $LogWindow insert end \
	"[TheSystem NumberOfIndustries] Industries\n"
  $LogWindow insert end \
	"[TheSystem NumberOfCars] Cars\n"
  $LogWindow insert end \
	"[TheSystem NumberOfTrains] Trains\n"
  $LogWindow see end
  $Main buttons configure -state disabled
  $Main buttons configure -state normal
  $Main menu entryconfigure file Save -state normal
  $Main toolbar setbuttonstate tools normal
  global FCFCarsLoaded
  if {$FCFCarsLoaded} {UpdateCarDisplayOptionMenus}

}

proc CarefulExit {} {
  switch -exact "[tk_messageBox -icon question -type yesno -message {Really Exit}]" {
    no {return}
    yes {
	if {[llength [info commands TheSystem]] > 0} {
	  rename TheSystem {}
	}
	if {[llength [info commands CurrentPrinter]] > 0} {
	  if {[CurrentPrinter IsOpenP]} {
	    CurrentPrinter ClosePrinter
	  }
	  rename CurrentPrinter {}
	}
	exit
    }
  }
}


SplashWorkMessage "Adding button menu and toolbar items" 70

if {$FCFCarsLoaded} {
  image create photo LoadCarsButtonImage -file [file join $ImageDir loadcars.gif]
  $Main toolbar addbutton tools loadcars -image LoadCarsButtonImage \
			-command LoadCars \
			-state disabled \
			-helptext "(Re-)Load Cars File"
  $Main buttons add -name loadcars -anchor w \
			-text {Load Cars File} -command LoadCars -underline 0 \
			  -state disabled \
			  -helptext "(Re-)Load Cars File"
  bind . <L> "$Main buttons invoke loadcars"
  bind . <l> "$Main buttons invoke loadcars"
  $Main menu entryconfigure file Save \
	-dynamichelp "Save Cars" \
	-command SaveCars \
	-state disabled
  image create photo SaveButtonImage -file [file join $CommonImageDir save.gif]
  $Main toolbar addbutton tools savecars -image SaveButtonImage \
		-command SaveCars \
		-helptext "Save Cars" \
		-state disabled
  $Main buttons add -name savecars -anchor w \
			-text {Save Cars File} -command SaveCars -underline 0 \
			  -state disabled \
			  -helptext "Save Cars File"
  bind . <S> "$Main buttons invoke savecars"
  bind . <s> "$Main buttons invoke savecars"
  if {0} {
    $Main buttons add -name groups -anchor w \
			-text {Car Selection Groups} -command SelectGroups \
			-underline [string first G {Car Selection Groups}] \
			-state disabled \
			  -helptext "Car Selection Groups Utility"
    bind . <G> "$Main buttons invoke groups"
    bind . <g> "$Main buttons invoke groups"
  }
}
if {$FCFTrainsLoaded} {
  $Main buttons add -name manageTrnPrint -anchor w \
			-text {Manage trains/printing} \
			-underline 0 \
			-state disabled \
			  -helptext "Manage Train Printing Menu"
  bind . <M> "$Main buttons invoke manageTrnPrint"
  bind . <m> "$Main buttons invoke manageTrnPrint"
  set menu [CreateManageTrainsPrintingMenu $Main manageTrnPrint]
  image create photo ManageTrainsPrintingImage \
		-file [file join $ImageDir managetrainsprint.gif]
  $Main toolbar addbutton tools manageTrnPrint \
		-image ManageTrainsPrintingImage \
		-command [list PostMenuOnPointer $menu $Main] \
		-state disabled \
		-helptext "Manage Train Printing Menu"

}

if {$FCFCarsLoaded} {
  image create photo ViewCarImage -file [file join $ImageDir viewcar.gif]
  $Main toolbar addbutton tools viewcar -image ViewCarImage \
		-command ViewCar \
		-state disabled \
		-helptext "View one Car"
  $Main buttons add -name viewcar -anchor w \
			-text {View Car Information} -command ViewCar \
			-underline 0 \
			-state disabled \
			-helptext "View one Car"
  bind . <V> "$Main buttons invoke viewcar"
  bind . <v> "$Main buttons invoke viewcar"
  image create photo EditCarImage -file [file join $ImageDir editcar.gif]
  $Main toolbar addbutton tools editcar -image EditCarImage \
			-command EditCar \
			-state disabled \
			-helptext "Edit a Car"
  $Main buttons add -name editcar -anchor w \
			-text {Edit Car Information} -command EditCar \
			-underline 0 \
			 -state disabled \
			  -helptext "Edit a Car"
  bind . <E> "$Main buttons invoke editcar"
  bind . <e> "$Main buttons invoke editcar"
  image create photo AddCarImage -file [file join $ImageDir addcar.gif]
  $Main toolbar addbutton tools addcar -image AddCarImage \
			-command AddNewCar \
			-state disabled \
			-helptext "Add a new Car"
  $Main buttons add  -name addcar -anchor w \
			-text {Add a New Car} -command AddNewCar \
			-underline [string first N {Add a New Car}] \
			-state disabled \
			  -helptext "Add a new Car"
  bind . <N> "$Main buttons invoke addcar"
  bind . <n> "$Main buttons invoke addcar"
  image create photo DeleteCarImage -file [file join $ImageDir deletecar.gif]
  $Main toolbar addbutton tools deletecar -image DeleteCarImage \
			-command DeleteCar \
			-state disabled \
			-helptext "Delete an existing Car"
  $Main buttons add -name deletecar -anchor w \
			-text {Delete An Existing Car} -command DeleteCar \
			   -underline 0 -state disabled \
			  -helptext "Delete an existing Car"
  bind . <D> "$Main buttons invoke deletecar"
  bind . <d> "$Main buttons invoke deletecar"
  image create photo UnassignedCarsImage \
		-file [file join $ImageDir unassignedcars.gif]
  $Main toolbar addbutton tools unassignedcars -image UnassignedCarsImage \
		-command ShowUnassignedCars \
		-state disabled \
		-helptext "Show Unassigned Cars"
  $Main buttons add -name unassignedcars -anchor w \
			-text {Show Unassigned Cars} \
				-command ShowUnassignedCars \
				-underline [string first U {Show Unassigned Cars}] \
				-state disabled \
			  -helptext "Show Unassigned Cars"
  bind . <U> "$Main buttons invoke unassignedcars"
  bind . <u> "$Main buttons invoke unassignedcars"
  image create photo AssignCarsImage \
		-file [file join $ImageDir assigncars.gif]
  $Main toolbar addbutton tools assigncars -image AssignCarsImage \
		-command AssignCars \
		-state disabled \
		-helptext "Run the Car Assignment procedure"
  $Main buttons add -name assigncars -anchor w \
			-text {Run Car Assignments} \
			    -command AssignCars \
			    -underline [string first A {Run Car Assignments}] \
			    -state disabled \
			  -helptext "Run the Car Assignment procedure"
  bind . <A> "$Main buttons invoke assigncars"
  bind . <a> "$Main buttons invoke assigncars"
}
if {$FCFTrainsLoaded} {
  image create photo RunAllTrainsImage \
		-file [file join $ImageDir runalltrains.gif]
  $Main toolbar addbutton tools runalltrains -image RunAllTrainsImage \
			-command RunAllTrains \
			-state disabled \
			-helptext "Run All Trains In Operating Session"
  $Main buttons add -name runalltrains -anchor w \
			-text {Run All Trains In Operating Session} \
			      -command RunAllTrains \
			      -underline [string first O {Run All Trains In Operating Session}] \
			      -state disabled \
			  -helptext "Run All Trains In Operating Session"
  bind . <O> "$Main buttons invoke runalltrains"
  bind . <o> "$Main buttons invoke runalltrains"
  image create photo RunBoxMovesImage \
		-file [file join $ImageDir runboxmoves.gif]
  $Main toolbar addbutton tools runboxmoves -image RunBoxMovesImage \
			-command RunBoxMoves \
			-state disabled \
			-helptext "Run Boxmove Trains"
  $Main buttons add -name runboxmovetrains -anchor w \
			-text {Run Boxmove Trains} \
				  -command RunBoxMoves \
				  -underline [string first B {Run Boxmove Trains}] \
			          -state disabled \
			  -helptext "Run Boxmove Trains"
  bind . <B> "$Main buttons invoke runboxmovetrains"
  bind . <b> "$Main buttons invoke runboxmovetrains"
  image create photo RunOneTrainImage \
		-file [file join $ImageDir runonetrain.gif]
  $Main toolbar addbutton tools runonetrain -image RunOneTrainImage \
			-command RunOneTrain \
			-state disabled \
			-helptext "Run a single train"
  $Main buttons add -name runonetrain -anchor w \
			-text {Run Trains One At A Time} \
			     -command RunOneTrain \
			     -underline [string first T {Run Trains One At A Time}] \
			     -state disabled \
			  -helptext "Run a single train"
  bind . <T> "$Main buttons invoke runonetrain"
  bind . <t> "$Main buttons invoke runonetrain"
}
if {$FCFPrintersLoaded} {
  image create photo PrintImage \
		-file [file join $CommonImageDir print.gif]
  $Main toolbar addbutton tools openprinter -image PrintImage \
		-command OpenPrinter \
		-helptext "Open printer"
  $Main buttons add -name openprinter -anchor w \
			-text {Open Printer  Alt-P} \
			   -command OpenPrinter \
			  -helptext "Open printer"
  bind . <Alt-P> "$Main buttons invoke openprinter"
  bind . <Alt-p> "$Main buttons invoke openprinter"
  image create photo ClosePrintImage \
		-file [file join $ImageDir closeprint.gif]
  global PrinterIndicator
  set PrinterIndicator [$Main mainframe addindicator \
				-relief flat -borderwidth 4 \
				-image ClosePrintImage]
  $Main toolbar addbutton tools closeprinter -image ClosePrintImage \
  		-command ClosePrinter \
		-helptext "Close printer"
  $Main buttons add -name closeprinter -anchor w \
			-text {Close Printer  Alt-C} \
			   -command ClosePrinter \
			  -helptext "Close printer"
  bind . <Alt-C> "$Main buttons invoke closeprinter"
  bind . <Alt-c> "$Main buttons invoke closeprinter"
  image create photo YardPrintImage \
		-file [file join $ImageDir yardprint.gif]
  $Main toolbar addbutton tools printyard -image YardPrintImage \
  		-command PrintYardLists \
		-state disabled \
		-helptext "Print Yard lists and other lists"
  $Main buttons add -name printyard -anchor w \
			-text {Print Yard Lists, etc.} \
			   -command PrintYardLists -underline 0 \
			   -state disabled \
			  -helptext "Print Yard lists and other lists"
  bind . <P> "$Main buttons invoke printyard"
  bind . <p> "$Main buttons invoke printyard"
}
if {$FCFCarsLoaded} {
  $Main buttons add -name showcars -anchor w \
			-text {Show Cars On Screen} \
			  -underline [string first C {Show Cars On Screen}] \
			  -state disabled \
			  -helptext "Show cars on screen"
  bind . <C> "$Main buttons invoke showcars"
  bind . <c> "$Main buttons invoke showcars"
  set menu [CreateShowCarsMenu $Main showcars]
  image create photo ShowCarsImage \
		-file [file join $ImageDir showcars.gif]
  $Main toolbar addbutton tools showcars -image ShowCarsImage \
		-command [list PostMenuOnPointer $menu $Main] \
		-state disabled \
		-helptext "Show cars on screen"
}
if {$FCFReportsLoaded && $FCFPrintersLoaded} {
  $Main buttons add -name reportsmenu -anchor w \
			-text {Reports Menu} \
			     -underline 0 -state disabled \
			  -helptext "Reports menu"
  bind . <R> "$Main buttons invoke reportsmenu"
  bind . <r> "$Main buttons invoke reportsmenu"
  set menu [CreateReportsMenu $Main reportsmenu]
  image create photo ReportsImage -file [file join $ImageDir reports.gif]
  $Main toolbar addbutton tools reportsmenu -image ReportsImage \
	-command [list PostMenuOnPointer $menu $Main] \
	-state disabled \
	-helptext "Reports menu"
}
if {$FCFIndustriesLoaded} {
  image create photo ResetIndustriesImage \
	-file [file join $ImageDir resetIndustries.gif]
  $Main toolbar addbutton tools resetindustries -image ResetIndustriesImage \
	-command ResetIndustryStatistics \
	-state disabled \
	-helptext "Reset industry statistics"
  $Main buttons add -name resetindustries -anchor w \
			-text {Reset Industry Statistics} \
				 -command ResetIndustryStatistics \
				 -underline [string first I {Reset Industry Statistics}] \
			         -state disabled \
			  -helptext "Reset industry statistics"
  bind . <I> "$Main buttons invoke resetindustries"
  bind . <i> "$Main buttons invoke resetindustries"
}
if {$FCFTrainsLoaded} {
  CreateTrainDisplay
}
if {$FCFCarsLoaded} {
  CreateCarDisplay
}

$Main buttons add -name quit -anchor w \
			-text {Quit -- Exit NOW} -command CarefulExit \
			-underline 0 \
			-helptext "Exit the program"
bind . <Q> "$Main buttons invoke quit"
bind . <q> "$Main buttons invoke quit"


image create photo CloseButtonImage -file [file join $CommonImageDir close.gif]
$Main toolbar addbutton tools close -image CloseButtonImage \
	-command CarefulExit \
	-helptext "Close the application"


update idle
set extraX 0
foreach s [$Main slideout list] {
  set rw [$Main slideout reqwidth $s]
  if {$rw > $extraX} {set extraX $rw}
}


$Main showit $extraX
  

catch {SplashWorkMessage {Done} 100}


