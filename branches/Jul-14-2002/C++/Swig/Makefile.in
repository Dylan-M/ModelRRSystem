prefix     = @prefix@
exec_prefix= @exec_prefix@
LIB_DIR        = ../../Lib
INSTALL         = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA    = @INSTALL_DATA@
CXX             = @CXX@
BaseCXXFLAGS    = @CXXFLAGS@
DEFS		= @DEFS@
SHLIB_CFLAGS    = @TCL_SHLIB_CFLAGS@
SHLIB_SUFFIX    = @TCL_SHLIB_SUFFIX@
SHLIB_LD        = @TCL_SHLIB_LD@
TCL_VERSION	= @TCL_VERSION@
VERSION		= @TCL_VERSION@
TCL_PREFIX      = @TCL_PREFIX@
TCL_EXEC_PREFIX	= @TCL_EXEC_PREFIX@
TCL_CFLAGS      = @TCL_CFLAGS@
TCL_DEFS	= @TCL_DEFS@
TCL_DBGX	= @TCL_DBGX@
TCLSH		= @TCL_EXEC_PREFIX@/bin/tclsh@TCL_VERSION@
TCL_LIB_SPEC	= @TCL_LIB_SPEC@
TCL_SHARED_LIBS	= @TCL_SHARED_LIBS@
INCLUDES        = -I$(TCL_PREFIX)/include -I. -I../Parsers -I../Classes
SWIG		= @SWIG@ -tcl -c++ -dlatex -I../Parsers -I../Classes
TARGET		= mrr
INTERFACE	= $(TARGET).i
SRCS		= $(TARGET)_wrap.cc
LTEX		= $(TARGET)_wrap.tex
OBJS		= $(TARGET)_wrap.o
CXXFLAGS = $(DEFS) $(TCL_DEFS) $(BaseCXXFLAGS) $(SHLIB_CFLAGS) $(INCLUDES) -c -Wall

TARGETLIB = $(LIB_DIR)/$(TARGET)$(SHLIB_SUFFIX)

all: .depend $(LTEX) $(TARGETLIB) $(LIB_DIR)/pkgIndex.tcl

$(LTEX) $(SRCS) : $(INTERFACE)
	$(SWIG) $(INTERFACE)
	mv $(TARGET)_wrap.c $(SRCS)

$(TARGETLIB) : $(OBJS) $(LIB_DIR)/libMRRClass$(SHLIB_SUFFIX) $(LIB_DIR)/libMRRParser$(SHLIB_SUFFIX)
	$(SHLIB_LD) -o $(TARGETLIB) $(OBJS) -L$(LIB_DIR) -lMRRClass -lMRRParser  $(TCL_SHARED_LIBS)

$(LIB_DIR)/libMRRClass$(SHLIB_SUFFIX) :
	make -C ../Classes $(LIB_DIR)/libMRRClass$(SHLIB_SUFFIX)

$(LIB_DIR)/libMRRParser$(SHLIB_SUFFIX) :
	make -C ../Parsers $(LIB_DIR)/libMRRParser$(SHLIB_SUFFIX)

$(LIB_DIR)/pkgIndex.tcl : ../../Lib/$(TARGET)$(SHLIB_SUFFIX)
	(cd $(LIB_DIR);export LD_LIBRARY_PATH=`pwd`;echo "pkg_mkIndex . $(TARGET)$(SHLIB_SUFFIX)"|$(TCLSH))

install: 

clean:
	rm -f .depend $(SRCS) $(LTEX) $(OBJS)

$(TARGET)_wrap.o : $(TARGET)_wrap.cc

.depend: $(TARGET)_wrap.cc
	$(CXX) -M $(CXXFLAGS) $(TARGET)_wrap.cc  > .depend

clean:
	rm -f $(OBJS) .depend

distclean: clean
	rm -f Makefile $(TARGET)_wrap.cc $(LTEX) $(SRCS)

#
# include a dependency file if one exists
#
ifeq (.depend,$(wildcard .depend))
include .depend
endif


