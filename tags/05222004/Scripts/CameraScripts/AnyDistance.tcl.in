#!@WISH@
#* 
#* ------------------------------------------------------------------
#* AnyDistance.tcl.in - Compute camera angles at any distance
#* Created by Robert Heller on Sun Jul 28 10:01:00 2002
#* ------------------------------------------------------------------
#* Modification History: $Log$
#* Modification History: Revision 1.3  2004/04/14 23:26:38  heller
#* Modification History: Add Slave option
#* Modification History:
#* Modification History: Revision 1.2  2002/07/28 14:03:50  heller
#* Modification History: Add it copyright notice headers
#* Modification History:
#* ------------------------------------------------------------------
#* Contents:
#* ------------------------------------------------------------------
#*  
#*     Model RR System, Version 2
#*     Copyright (C) 1994,1995,2002  Robert Heller D/B/A Deepwoods Software
#* 			51 Locke Hill Road
#* 			Wendell, MA 01379-9728
#* 
#*     This program is free software; you can redistribute it and/or modify
#*     it under the terms of the GNU General Public License as published by
#*     the Free Software Foundation; either version 2 of the License, or
#*     (at your option) any later version.
#* 
#*     This program is distributed in the hope that it will be useful,
#*     but WITHOUT ANY WARRANTY; without even the implied warranty of
#*     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#*     GNU General Public License for more details.
#* 
#*     You should have received a copy of the GNU General Public License
#*     along with this program; if not, write to the Free Software
#*     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#* 
#*  
#* 

####
### Lens database.  There are two values per lens, the minimum focus and the
### angle of view
### the numbers are feet for the minimum focus and radians for the angle of 
### view (yeah, the trig functions want radians).
### 
### 

global Lenses
# Minolta 17mm: 0.8 feet, 104 degrees
set Lenses(Minolta17,MinFocus) 0.8
set Lenses(Minolta17,AngView) [expr (104.0 / 180) * 3.14159]
# Minolta 20mm: 0.8 feet, 94 degrees
set Lenses(Minolta20,MinFocus) 0.8
set Lenses(Minolta20,AngView) [expr (94.0 / 180) * 3.14159]
# Minolta 24mm: 0.8 feet, 84 degrees
set Lenses(Minolta24,MinFocus) 0.8
set Lenses(Minolta24,AngView) [expr (84.0 / 180) * 3.14159]
# Minolta 28mm: 1.0 feet, 75 degrees
set Lenses(Minolta28,MinFocus) 1.0
set Lenses(Minolta28,AngView) [expr (75.0 / 180) * 3.14159]
# Quantaray 28mm: 22 mm, 75 degrees
set Lenses(Quantaray28,MinFocus) [expr (22.0 / 2.56) / 12]
set Lenses(Quantaray28,AngView) [expr (75.0 / 180) * 3.14159]
# Minolta 35mm: 1.0 feet, 63 degrees
set Lenses(Minolta35,MinFocus) 1.0
set Lenses(Minolta35,AngView) [expr (63.0 / 180) * 3.14159]
# Minolta 50mm (standard lens): 1.48 feet, 47 degrees
set Lenses(Minolta50,MinFocus) 1.48
set Lenses(Minolta50,AngView) [expr (47.0 / 180) * 3.14159]

####
### Set up for your scale.  This is for H0 scale
### Other scales: 
###   Scale name   Gauge      Proportion
###   IIm (or G)   45mm       1:22.5
###   I            45mm       1:32
###   OO           16.5mm     1:76
###   HO           16.5mm     1:87
###   N            9mm        1:160
###   Z            6.5mm      1:200

global Scale
set Scale 87
global ScaleName
set ScaleName {H0}

global IsSlave
set IsSlave 0

proc GetLensNames {} {
  global Lenses
  set arrayNames [array names Lenses]
  set result {}
  foreach a $arrayNames {
    set ln [lindex [split $a {,}] 0]
    if {[lsearch -exact $result $ln] < 0} {
      lappend result $ln
    }
  }
  return [lsort $result]
}

global SelectedLens
set SelectedLens {}
global Distance
set Distance 0
global DistanceInches
set DistanceInches 0
global ColorMode
set ColorMode {color}
global PrintCanvasOutputDevice
set PrintCanvasOutputDevice {Printer}
global PrintCanvasPageAnchor
set PrintCanvasPageAnchor {center}
global PrintCanvasPrintRotate
set PrintCanvasPrintRotate 0

global Another
set Another 0

proc SelectLens {} {
  global SelectedLens
  global Lenses
  global Distance
  global DistanceInches
  toplevel .dialog
  wm maxsize .dialog 1024 768
  wm title .dialog {Select A Lens}

  foreach x [GetLensNames] {
    button .dialog.b$x -text "$x" -command "set SelectedLens $x;destroy .dialog"
    pack .dialog.b$x -expand 1 -fill x
  }
  frame .dialog.distance
  pack .dialog.distance -expand 1 -fill x
  label .dialog.distance.l -text {Distance (inches): } -relief flat
  pack .dialog.distance.l -side left
  entry .dialog.distance.e -relief sunken -textvariable DistanceInches
  set DistanceInches 0
  pack .dialog.distance.e -side right -expand 1 -fill x
  button .dialog.q -text {Abort} -command {SignalExit}
  pack .dialog.q -expand 1 -fill x
  update idletasks
  grab .dialog
  tkwait window .dialog
  set Distance [expr $DistanceInches / 12.0]
  if {$Distance < $Lenses($SelectedLens,MinFocus)} {
    set Distance $Lenses($SelectedLens,MinFocus)
  }
}

proc SignalExit {} {
  global IsSlave
  if {$IsSlave} {
    puts stdout "101 Exit"
    flush stdout
    set ans [gets stdin]
    #puts stderr "*** SignalExit: ans = '$ans'"
  }
  exit
}  

proc DisplayLens {} {
  global Lenses
  global SelectedLens
  global Distance
  global Scale
  global ScaleName

  set AngView  $Lenses($SelectedLens,AngView)
  set angle    [expr $AngView / 2.0]
  set depth_Scale_feet [expr $Scale * $Distance]
  set width_Scale_feet [expr ($depth_Scale_feet * tan($angle)) * 2.0]
  set width_real_inches [expr ($width_Scale_feet / double($Scale)) * 12.0]
  set depth_real_inches [expr ($depth_Scale_feet / double($Scale)) * 12.0]
  # the exposure width with 35 mm film is 1-7/16 inches
  set Scale_Slide_Width_inches [expr 1.43750 * $Scale]
  set Scale_Slide_Scale_Factor [expr $width_real_inches / $Scale_Slide_Width_inches]
  wm title . "$SelectedLens at [expr int($depth_real_inches)] inches"
  set screenHeightCM [expr [winfo screenmmheight .] / 10.0]
  set screenWidthCM  [expr [winfo screenmmwidth .] / 10.0]
  set canvasWidth [expr $width_real_inches + 3]
  set canvasHeight [expr $depth_real_inches + 5]
  set canvasSR [list 0c 0c $canvasWidth\c $canvasHeight\c]
  set sb 0
  if {[expr $canvasHeight + 5] > $screenHeightCM} {
     set canvasHeight [expr $screenHeightCM - 8]
     set sb 1
  }
  if {[expr $canvasWidth + 5] > $screenWidthCM} {
    set canvasWidth [expr $screenWidthCM  - 8]
    set sb 1
  }
  if {$sb} {
    frame .cf -borderwidth 0 -relief flat
    pack .cf -fill both
    frame .cf.f1 -borderwidth 0 -relief flat
    set canvas [canvas \
	[format ".cf.f1.%sAt%din" [string tolower $SelectedLens] \
			    [expr int($depth_real_inches)]]  \
	-width $canvasWidth\c \
	-height $canvasHeight\c \
	-scrollregion $canvasSR \
	-yscrollcommand {.cf.f1.vscroll set} \
	-xscrollcommand {.cf.f2.hscroll set}]
    pack $canvas -expand 1 -fill both -side left
    scrollbar .cf.f1.vscroll -orient vertical -command "$canvas yview"
    pack .cf.f1.vscroll -side right -expand 1 -fill y
    pack .cf.f1 -fill both
    frame .cf.f2 -borderwidth 0 -relief flat
    scrollbar .cf.f2.hscroll -orient horizontal -command "$canvas xview"
    pack .cf.f2.hscroll -side left -expand 1 -fill x
    frame .cf.f2.fill -width 23 \
		      -height 23
    pack .cf.f2.fill -side right
    pack .cf.f2 -side bottom -fill x
  } else {
    set canvas [canvas \
	[format ".%sAt%din" [string tolower $SelectedLens] \
			    [expr int($depth_real_inches)]]  \
	-width $canvasWidth\c \
	-height $canvasHeight\c]
    pack $canvas -expand 1 -fill both
  }
  $canvas create line 1.5c 1.5c [expr $width_real_inches + 1.5]c 1.5c \
		      [expr $width_real_inches + 1.5]c 1.5c [expr ($width_real_inches / 2) + 1.5]c [expr $depth_real_inches + 1.5]c  \
		      [expr ($width_real_inches / 2) + 1.5]c [expr $depth_real_inches + 1.5]c 1.5c 1.5c  \
		      -width 3 -join miter
  $canvas create text [expr ($width_real_inches / 2) + 1.5]c .5c -anchor n -text "$width_Scale_feet scale feet, $width_real_inches real inches"
  $canvas create line 1.5c 1c [expr $width_real_inches + 1.5]c 1c -arrow both
  if {$SelectedLens == {Minolta17}} {
    $canvas create text [expr $width_real_inches + 1.5]c [expr ($depth_real_inches / 2.0) + 3.5]c -anchor e -text "$depth_Scale_feet scale feet,\n$depth_real_inches real inches"
    $canvas create line [expr $width_real_inches + 2.0]c 1.5c [expr $width_real_inches + 2.0]c [expr $depth_real_inches + 1.5]c -arrow both
    $canvas create line [expr $width_real_inches + 1.5]c [expr $depth_real_inches + 1.5]c [expr ($width_real_inches / 2) + 1.5]c [expr $depth_real_inches + 1.5]c -stipple gray25 -width 2
  } else {
    $canvas create text 1.5c [expr ($depth_real_inches / 2.0) + 3.5]c -anchor w -text "$depth_Scale_feet scale feet,\n$depth_real_inches real inches"
    $canvas create line 1c 1.5c 1c [expr $depth_real_inches + 1.5]c -arrow both
    $canvas create line 1.5c [expr $depth_real_inches + 1.5]c [expr ($width_real_inches / 2) + 1.5]c [expr $depth_real_inches + 1.5]c -stipple gray25 -width 2
  }
  $canvas create text [expr ($width_real_inches / 2) + 1.5]c 2c -anchor n -text "(Scene focal plane)"
  set t [$canvas create text [expr ($width_real_inches / 2) + 1.5]c [expr $depth_real_inches + 2.0]c -anchor n -text "(Camera)"]
  set bottom [lindex [$canvas bbox $t] 3]
  set t [$canvas create text [expr ($width_real_inches / 2) + 1.5]c [expr $bottom + 5] -anchor n -text {(Lens bottom even with "ground")}]
  set bottom [lindex [$canvas bbox $t] 3]
  set t [$canvas create text [expr ($width_real_inches / 2) + 1.5]c [expr $bottom + 5] -anchor n -text "Lens: $SelectedLens"]
  set bottom [lindex [$canvas bbox $t] 3]
  $canvas create text [expr ($width_real_inches / 2) + 1.5]c \
	[expr $bottom + 5] -anchor n \
	-text "$ScaleName Slide width is $Scale_Slide_Width_inches inches, scale factor is $Scale_Slide_Scale_Factor"
  button .p -text "Print" -command "PrintCanvas $canvas"
  pack .p -fill x -expand 1
  button .a -text "Another" -command {set Another 1}
  pack .a -fill x -expand 1
  button .q -text "Quit" -command {SignalExit}
  pack .q -fill x -expand 1
  global IsSlave
  if {$IsSlave} {
    puts {103 Restore}
    flush stdout
  } else {
    wm deiconify .
  }
  global Another
  set Another 0
  update idletasks
  tkwait variable Another
  wm withdraw .
  foreach w [winfo children .] {destroy $w}
}

# XFNoParsing
# Program: template
# Description: print canvas form

global printCanvas
set printCanvas(activeBackground) ""
set printCanvas(activeForeground) ""
set printCanvas(background) ""
set printCanvas(font) ""
set printCanvas(foreground) ""
set printCanvas(canvas) ""

proc PrintCanvas {printCanvasCanvas} {

  global printCanvas

  set tmpButtonOpt ""
  set tmpFrameOpt ""
  set tmpMessageOpt ""

  if {"$printCanvas(activeBackground)" != ""} {
    append tmpButtonOpt "-activebackground \"$printCanvas(activeBackground)\" "
  }
  if {"$printCanvas(activeForeground)" != ""} {
    append tmpButtonOpt "-activeforeground \"$printCanvas(activeForeground)\" "
  }
  if {"$printCanvas(background)" != ""} {
    append tmpButtonOpt "-background \"$printCanvas(background)\" "
    append tmpFrameOpt "-background \"$printCanvas(background)\" "
    append tmpMessageOpt "-background \"$printCanvas(background)\" "
  }
  if {"$printCanvas(font)" != ""} {
    append tmpButtonOpt "-font \"$printCanvas(font)\" "
    append tmpMessageOpt "-font \"$printCanvas(font)\" "
  }
  if {"$printCanvas(foreground)" != ""} {
    append tmpButtonOpt "-foreground \"$printCanvas(foreground)\" "
    append tmpMessageOpt "-foreground \"$printCanvas(foreground)\" "
  }

  if {[winfo exists $printCanvasCanvas]} {
    if {[winfo class $printCanvasCanvas] == "Canvas"} {
      set printCanvas(canvas) "$printCanvasCanvas"
    } else {
      error "$printCanvasCanvas is not a Canvas"
    }
  } else {
    error "$printCanvasCanvas is not a window"
  }

  # build widget .printCanvas
  if {"[info procs XFEdit]" != ""} {
    catch "XFDestroy .printCanvas"
  } {
    catch "destroy .printCanvas"
  }
  toplevel .printCanvas \
    -relief {raised}
  catch ".printCanvas config $tmpFrameOpt"

  # Window manager configurations
  global tkVersion
  wm positionfrom .printCanvas ""
  wm sizefrom .printCanvas ""
  wm maxsize .printCanvas 1000 768
  wm minsize .printCanvas 10 10
  wm title .printCanvas {Print Canvas}

  # build widget .printCanvas.buttons
  frame .printCanvas.buttons \
    -borderwidth {2}
  catch ".printCanvas.buttons config $tmpFrameOpt"

  # build widget .printCanvas.buttons.print
  button .printCanvas.buttons.print \
    -text {Print}\
    -command {
	global printCanvas
	set opt {}
	global PrintCanvasOutputDevice
	global PrintCanvasPageAnchor
	global PrintCanvasPrintRotate
	global ColorMode
	if {$PrintCanvasOutputDevice != "Printer"} {
	  set file "[.printCanvas.file.filenameEntry get]"
	  if {$file == {}} {
	    set file "[winfo name $printCanvas(canvas)].ps"
	  }
	  lappend opt {-file} $file
	}
	lappend opt {-colormode} "$global ColorMode"
	set opt "$opt -pageanchor $PrintCanvasPageAnchor"
	set x [.printCanvas.pagePos.pos.height get]
	if {$x != {}} {
	  lappend opt {-pageheight} [join [list [format "%f" $x] {p}] {}]
	}
	set x [.printCanvas.pagePos.pos.width get]
	if {$x != {}} {
	  lappend opt {-pagewidth} [join [list [format "%f" $x] {p}] {}] 
	}
	set x [.printCanvas.pagePos.pos.x get]
	if {$x != {}} {
	  lappend opt {-pagex} [join [list [format "%f" $x] {p}] {}]
	}
	set x [.printCanvas.pagePos.pos.y get]
	if {$x != {}} {
	  lappend opt {-pagey} [join [list [format "%f" $x] {p}] {}]
	}
	set x [.printCanvas.canvasPos.height get]
	if {$x != {}} {
	  lappend opt {-height} [format "%f" $x]
	}
	set x [.printCanvas.canvasPos.width get]
	if {$x != {}} {
	  lappend opt {-width} [format "%f" $x]
	}
	set x [.printCanvas.canvasPos.x get]
	if {$x != {}} {
	  lappend opt {-x} [format "%f" $x]
	}
	set x [.printCanvas.canvasPos.y get]
	if {$x != {}} {
	  lappend opt {-y} [format "%f" $x]
	}
	if {$PrintCanvasPrintRotate} {
	  lappend opt {-rotate}  {1}
	}
	set cmd [concat $printCanvas(canvas) postscript $opt]
	set printer [.printCanvas.printerFrame.printEntry get]
	if {"[info commands XFDestroy]" != ""} {
	  catch {XFDestroy .printCanvas}
	} {
	  catch {destroy .printCanvas}
	}
	if {$PrintCanvasOutputDevice == "Printer"} {
	  if {$printer == {}} {
	    set printer "|lpr"
	  }
	  set pipe [open $printer "w"]
	  set pid [pid $pipe]
	  if {[catch $cmd postscript]} {
	    error $postscript
	  } 
	  puts $pipe $postscript
	  close $pipe
	  wait $pid
	} else {
	  if {[catch $cmd result]} {
	    error $result
	  } 
	}
  } 
  catch ".printCanvas.buttons.print config $tmpButtonOpt"

  # build widget .printCanvas.buttons.cancel
  button .printCanvas.buttons.cancel \
    -text {Cancel}\
    -command {
      if {"[info commands XFDestroy]" != ""} {
        catch {XFDestroy .printCanvas}
      } {
        catch {destroy .printCanvas}
      }
    }
  catch ".printCanvas.buttons.cancel config $tmpButtonOpt"

  # pack widget .printCanvas.buttons
  pack append .printCanvas.buttons \
    .printCanvas.buttons.print {left frame center expand} \
    .printCanvas.buttons.cancel {left frame center expand} 

  # build widget .printCanvas.canvasPos
  frame .printCanvas.canvasPos \
    -borderwidth {2}
  catch ".printCanvas.canvasPos config $tmpFrameOpt"

  # build widget .printCanvas.canvasPos.height
  entry .printCanvas.canvasPos.height \
    -relief {sunken}\
    -width {5}
  catch ".printCanvas.canvasPos.height config $tmpMessageOpt"

  # build widget .printCanvas.canvasPos.label13
  label .printCanvas.canvasPos.label13 \
    -text {X:}
  catch ".printCanvas.canvasPos.label13 config $tmpMessageOpt"

  # build widget .printCanvas.canvasPos.label15
  label .printCanvas.canvasPos.label15 \
    -text {Y:}
  catch ".printCanvas.canvasPos.label15 config $tmpMessageOpt"

  # build widget .printCanvas.canvasPos.label17
  label .printCanvas.canvasPos.label17 \
    -text {Width:}
  catch ".printCanvas.canvasPos.label17 config $tmpMessageOpt"

  # build widget .printCanvas.canvasPos.label19
  label .printCanvas.canvasPos.label19 \
    -text {Height:}
  catch ".printCanvas.canvasPos.label19 config $tmpMessageOpt"

  # build widget .printCanvas.canvasPos.width
  entry .printCanvas.canvasPos.width \
    -relief {sunken}\
    -width {5}
  catch ".printCanvas.canvasPos.width config $tmpMessageOpt"

  # build widget .printCanvas.canvasPos.x
  entry .printCanvas.canvasPos.x \
    -relief {sunken}\
    -width {5}
  catch ".printCanvas.canvasPos.x config $tmpMessageOpt"

  # build widget .printCanvas.canvasPos.y
  entry .printCanvas.canvasPos.y \
    -relief {sunken}\
    -width {5}
  catch ".printCanvas.canvasPos.y config $tmpMessageOpt"

  # pack widget .printCanvas.canvasPos
  pack append .printCanvas.canvasPos \
    .printCanvas.canvasPos.label13 {left frame center} \
    .printCanvas.canvasPos.x {left frame center} \
    .printCanvas.canvasPos.label15 {left frame center} \
    .printCanvas.canvasPos.y {left frame center} \
    .printCanvas.canvasPos.label17 {left frame center} \
    .printCanvas.canvasPos.width {left frame center} \
    .printCanvas.canvasPos.label19 {left frame center} \
    .printCanvas.canvasPos.height {left frame center} 

  # build widget .printCanvas.deviceSelect
  frame .printCanvas.deviceSelect \
    -borderwidth {2}
  catch ".printCanvas.deviceSelect config $tmpFrameOpt"

  # build widget .printCanvas.deviceSelect.radiobutton3
  radiobutton .printCanvas.deviceSelect.radiobutton3 \
    -text {Printer}\
    -value {Printer}\
    -variable {PrintCanvasOutputDevice}\
    -command {
	.printCanvas.printerFrame.printEntry config -state normal
	.printCanvas.file.filenameEntry config -state disabled
	.printCanvas.file.browse config -state disabled
	focus .printCanvas.printerFrame.printEntry
	}
  catch ".printCanvas.deviceSelect.radiobutton3 config $tmpButtonOpt"

  # build widget .printCanvas.deviceSelect.radiobutton4
  radiobutton .printCanvas.deviceSelect.radiobutton4 \
    -text {File}\
    -value {File}\
    -variable {PrintCanvasOutputDevice}\
    -command {
	.printCanvas.printerFrame.printEntry config -state disabled
	.printCanvas.file.filenameEntry  config -state normal
	.printCanvas.file.browse config -state normal
	focus .printCanvas.file.filenameEntry
	}
  catch ".printCanvas.deviceSelect.radiobutton4 config $tmpButtonOpt"

  # pack widget .printCanvas.deviceSelect
  pack append .printCanvas.deviceSelect \
    .printCanvas.deviceSelect.radiobutton3 {left frame center expand} \
    .printCanvas.deviceSelect.radiobutton4 {left frame center expand} 

  # build widget .printCanvas.formLabel
  label .printCanvas.formLabel \
    -font {-Adobe-Helvetica-Bold-R-Normal--*-240-*}\
    -text {Print Lens Diagram}
  catch ".printCanvas.formLabel config $tmpMessageOpt"

  # build widget .printCanvas.colorModeFrame
  frame .printCanvas.colorModeFrame \
    -borderwidth {2}\
    -relief {raised}
  catch ".printCanvas.colorModeFrame config $tmpFrameOpt"

  # build widget .printCanvas.colorModeFrame.label1
  label .printCanvas.colorModeFrame.label1 \
    -borderwidth {0}\
    -text {Colormode:}
  catch ".printCanvas.colorModeFrame.label1 config $tmpMessageOpt"

  tk_optionMenu .printCanvas.colorModeFrame.colorMenu ColorMode \
	{color} {gray} {mono}

  # pack widget .printCanvas.colorModeFrame
  pack append .printCanvas.colorModeFrame \
    .printCanvas.colorModeFrame.label1 {left frame center fill} \
    .printCanvas.colorModeFrame.colorMenu {right frame center fill} 

  # build widget .printCanvas.file
  frame .printCanvas.file \
    -borderwidth {2}
  catch ".printCanvas.file config $tmpFrameOpt"

  # build widget .printCanvas.file.browse
  button .printCanvas.file.browse \
    -command {
	set file [tk_getSaveFile -defaultextension .ps \
				 -initialfile "[.printCanvas.file.filenameEntry get]" \
				 -filetypes { {"PostScript FIles" {.ps} TEXT} }]
	if {$file != {}} {
	  .printCanvas.file.filenameEntry delete 0 end
	  .printCanvas.file.filenameEntry insert end $file
	}}\
    -text {Browse}
  catch ".printCanvas.file.browse config $tmpButtonOpt"

  # build widget .printCanvas.file.filenameEntry
  entry .printCanvas.file.filenameEntry \
    -relief {sunken}
  catch ".printCanvas.file.filenameEntry config $tmpMessageOpt"

  # build widget .printCanvas.file.label9
  label .printCanvas.file.label9 \
    -text {Filename:}
  catch ".printCanvas.file.label9 config $tmpMessageOpt"

  # pack widget .printCanvas.file
  pack append .printCanvas.file \
    .printCanvas.file.label9 {left frame center} \
    .printCanvas.file.filenameEntry {left frame center expand fillx} \
    .printCanvas.file.browse {left frame center} 

  # build widget .printCanvas.pagePos
  frame .printCanvas.pagePos \
    -borderwidth {2}
  catch ".printCanvas.pagePos config $tmpFrameOpt"

  # build widget .printCanvas.pagePos.anchoring
  frame .printCanvas.pagePos.anchoring \
    -borderwidth {2}
  catch ".printCanvas.pagePos.anchoring config $tmpFrameOpt"

  # build widget .printCanvas.pagePos.anchoring.anchors
  frame .printCanvas.pagePos.anchoring.anchors \
    -borderwidth {2}
  catch ".printCanvas.pagePos.anchoring.anchors config $tmpFrameOpt"

  # build widget .printCanvas.pagePos.anchoring.anchors.frame33
  frame .printCanvas.pagePos.anchoring.anchors.frame33 
  catch ".printCanvas.pagePos.anchoring.anchors.frame33 config $tmpFrameOpt"

  # build widget .printCanvas.pagePos.anchoring.anchors.frame33.radiobutton36
  radiobutton .printCanvas.pagePos.anchoring.anchors.frame33.radiobutton36 \
    -text {NW}\
    -value {nw}\
    -variable {PrintCanvasPageAnchor}
  catch ".printCanvas.pagePos.anchoring.anchors.frame33.radiobutton36 config $tmpButtonOpt"

  # build widget .printCanvas.pagePos.anchoring.anchors.frame33.radiobutton37
  radiobutton .printCanvas.pagePos.anchoring.anchors.frame33.radiobutton37 \
    -text {N}\
    -value {n}\
    -variable {PrintCanvasPageAnchor}
  catch ".printCanvas.pagePos.anchoring.anchors.frame33.radiobutton37 config $tmpButtonOpt"

  # build widget .printCanvas.pagePos.anchoring.anchors.frame33.radiobutton38
  radiobutton .printCanvas.pagePos.anchoring.anchors.frame33.radiobutton38 \
    -text {NE}\
    -value {ne}\
    -variable {PrintCanvasPageAnchor}
  catch ".printCanvas.pagePos.anchoring.anchors.frame33.radiobutton38 config $tmpButtonOpt"

  # pack widget .printCanvas.pagePos.anchoring.anchors.frame33
  pack append .printCanvas.pagePos.anchoring.anchors.frame33 \
    .printCanvas.pagePos.anchoring.anchors.frame33.radiobutton36 {left frame center fillx} \
    .printCanvas.pagePos.anchoring.anchors.frame33.radiobutton37 {left frame center fillx} \
    .printCanvas.pagePos.anchoring.anchors.frame33.radiobutton38 {left frame center fillx} 

  # build widget .printCanvas.pagePos.anchoring.anchors.frame39
  frame .printCanvas.pagePos.anchoring.anchors.frame39 
  catch ".printCanvas.pagePos.anchoring.anchors.frame39 config $tmpFrameOpt"

  # build widget .printCanvas.pagePos.anchoring.anchors.frame39.radiobutton36
  radiobutton .printCanvas.pagePos.anchoring.anchors.frame39.radiobutton36 \
    -text {W}\
    -value {w}\
    -variable {PrintCanvasPageAnchor}
  catch ".printCanvas.pagePos.anchoring.anchors.frame39.radiobutton36 config $tmpButtonOpt"

  # build widget .printCanvas.pagePos.anchoring.anchors.frame39.radiobutton37
  radiobutton .printCanvas.pagePos.anchoring.anchors.frame39.radiobutton37 \
    -text {C}\
    -value {center}\
    -variable {PrintCanvasPageAnchor}
  catch ".printCanvas.pagePos.anchoring.anchors.frame39.radiobutton37 config $tmpButtonOpt"

  # build widget .printCanvas.pagePos.anchoring.anchors.frame39.radiobutton38
  radiobutton .printCanvas.pagePos.anchoring.anchors.frame39.radiobutton38 \
    -text {E}\
    -value {e}\
    -variable {PrintCanvasPageAnchor}
  catch ".printCanvas.pagePos.anchoring.anchors.frame39.radiobutton38 config $tmpButtonOpt"

  # pack widget .printCanvas.pagePos.anchoring.anchors.frame39
  pack append .printCanvas.pagePos.anchoring.anchors.frame39 \
    .printCanvas.pagePos.anchoring.anchors.frame39.radiobutton36 {left frame center expand fillx} \
    .printCanvas.pagePos.anchoring.anchors.frame39.radiobutton37 {left frame center} \
    .printCanvas.pagePos.anchoring.anchors.frame39.radiobutton38 {left frame center expand fillx} 

  # build widget .printCanvas.pagePos.anchoring.anchors.frame40
  frame .printCanvas.pagePos.anchoring.anchors.frame40 
  catch ".printCanvas.pagePos.anchoring.anchors.frame40 config $tmpFrameOpt"

  # build widget .printCanvas.pagePos.anchoring.anchors.frame40.radiobutton36
  radiobutton .printCanvas.pagePos.anchoring.anchors.frame40.radiobutton36 \
    -text {SW}\
    -value {sw}\
    -variable {PrintCanvasPageAnchor}
  catch ".printCanvas.pagePos.anchoring.anchors.frame40.radiobutton36 config $tmpButtonOpt"

  # build widget .printCanvas.pagePos.anchoring.anchors.frame40.radiobutton37
  radiobutton .printCanvas.pagePos.anchoring.anchors.frame40.radiobutton37 \
    -text {S}\
    -value {s}\
    -variable {PrintCanvasPageAnchor}
  catch ".printCanvas.pagePos.anchoring.anchors.frame40.radiobutton37 config $tmpButtonOpt"

  # build widget .printCanvas.pagePos.anchoring.anchors.frame40.radiobutton38
  radiobutton .printCanvas.pagePos.anchoring.anchors.frame40.radiobutton38 \
    -text {SE}\
    -value {se}\
    -variable {PrintCanvasPageAnchor}
  catch ".printCanvas.pagePos.anchoring.anchors.frame40.radiobutton38 config $tmpButtonOpt"

  # pack widget .printCanvas.pagePos.anchoring.anchors.frame40
  pack append .printCanvas.pagePos.anchoring.anchors.frame40 \
    .printCanvas.pagePos.anchoring.anchors.frame40.radiobutton36 {left frame center fillx} \
    .printCanvas.pagePos.anchoring.anchors.frame40.radiobutton37 {left frame center fillx} \
    .printCanvas.pagePos.anchoring.anchors.frame40.radiobutton38 {left frame center fillx} 

  # pack widget .printCanvas.pagePos.anchoring.anchors
  pack append .printCanvas.pagePos.anchoring.anchors \
    .printCanvas.pagePos.anchoring.anchors.frame33 {top frame center fillx} \
    .printCanvas.pagePos.anchoring.anchors.frame39 {top frame center fillx} \
    .printCanvas.pagePos.anchoring.anchors.frame40 {top frame center fillx} 

  # build widget .printCanvas.pagePos.anchoring.rotate
  checkbutton .printCanvas.pagePos.anchoring.rotate \
    -text {Rotate}\
    -variable {PrintCanvasPrintRotate}
  catch ".printCanvas.pagePos.anchoring.rotate config $tmpButtonOpt"

  # pack widget .printCanvas.pagePos.anchoring
  pack append .printCanvas.pagePos.anchoring \
    .printCanvas.pagePos.anchoring.anchors {left frame center expand} \
    .printCanvas.pagePos.anchoring.rotate {right frame center expand} 

  # build widget .printCanvas.pagePos.pos
  frame .printCanvas.pagePos.pos \
    -borderwidth {2}
  catch ".printCanvas.pagePos.pos config $tmpFrameOpt"

  # build widget .printCanvas.pagePos.pos.height
  entry .printCanvas.pagePos.pos.height \
    -relief {sunken}\
    -width {5}
  catch ".printCanvas.pagePos.pos.height config $tmpMessageOpt"

  # build widget .printCanvas.pagePos.pos.label13
  label .printCanvas.pagePos.pos.label13 \
    -text {X:}
  catch ".printCanvas.pagePos.pos.label13 config $tmpMessageOpt"

  # build widget .printCanvas.pagePos.pos.label15
  label .printCanvas.pagePos.pos.label15 \
    -text {Y:}
  catch ".printCanvas.pagePos.pos.label15 config $tmpMessageOpt"

  # build widget .printCanvas.pagePos.pos.label17
  label .printCanvas.pagePos.pos.label17 \
    -text {Width:}
  catch ".printCanvas.pagePos.pos.label17 config $tmpMessageOpt"

  # build widget .printCanvas.pagePos.pos.label19
  label .printCanvas.pagePos.pos.label19 \
    -text {Height:}
  catch ".printCanvas.pagePos.pos.label19 config $tmpMessageOpt"

  # build widget .printCanvas.pagePos.pos.width
  entry .printCanvas.pagePos.pos.width \
    -relief {sunken}\
    -width {5}
  catch ".printCanvas.pagePos.pos.width config $tmpMessageOpt"

  # build widget .printCanvas.pagePos.pos.x
  entry .printCanvas.pagePos.pos.x \
    -relief {sunken}\
    -width {5}
  catch ".printCanvas.pagePos.pos.x config $tmpMessageOpt"

  # build widget .printCanvas.pagePos.pos.y
  entry .printCanvas.pagePos.pos.y \
    -relief {sunken}\
    -width {5}
  catch ".printCanvas.pagePos.pos.y config $tmpMessageOpt"

  # pack widget .printCanvas.pagePos.pos
  pack append .printCanvas.pagePos.pos \
    .printCanvas.pagePos.pos.label13 {left frame center} \
    .printCanvas.pagePos.pos.x {left frame center} \
    .printCanvas.pagePos.pos.label15 {left frame center} \
    .printCanvas.pagePos.pos.y {left frame center} \
    .printCanvas.pagePos.pos.label17 {left frame center} \
    .printCanvas.pagePos.pos.width {left frame center} \
    .printCanvas.pagePos.pos.label19 {left frame center} \
    .printCanvas.pagePos.pos.height {left frame center} 

  # pack widget .printCanvas.pagePos
  pack append .printCanvas.pagePos \
    .printCanvas.pagePos.anchoring {top frame center fillx} \
    .printCanvas.pagePos.pos {top frame center fillx} 

  # build widget .printCanvas.printerFrame
  frame .printCanvas.printerFrame \
    -borderwidth {2}
  catch ".printCanvas.printerFrame config $tmpFrameOpt"

  # build widget .printCanvas.printerFrame.label7
  label .printCanvas.printerFrame.label7 \
    -text {Printer Command:}
  catch ".printCanvas.printerFrame.label7 config $tmpMessageOpt"

  # build widget .printCanvas.printerFrame.printEntry
  entry .printCanvas.printerFrame.printEntry \
    -relief {sunken}
  catch ".printCanvas.printerFrame.printEntry config $tmpMessageOpt"

  # pack widget .printCanvas.printerFrame
  pack append .printCanvas.printerFrame \
    .printCanvas.printerFrame.label7 {left frame center fillx} \
    .printCanvas.printerFrame.printEntry {left frame center expand fillx} 

  # pack widget .printCanvas
  pack append .printCanvas \
    .printCanvas.formLabel {top frame center fillx} \
    .printCanvas.deviceSelect {top frame center fillx} \
    .printCanvas.printerFrame {top frame center fillx} \
    .printCanvas.file {top frame center fillx} \
    .printCanvas.colorModeFrame {top frame center fillx} \
    .printCanvas.canvasPos {top frame center fillx} \
    .printCanvas.pagePos {top frame center expand fillx} \
    .printCanvas.buttons {top frame center fillx} 

  focus .printCanvas.printerFrame.printEntry
  bind .printCanvas.file.filenameEntry <Return> {focus .printCanvas.canvasPos.x}
  bind .printCanvas.printerFrame.printEntry <Return> {focus .printCanvas.canvasPos.x}
  bind .printCanvas.canvasPos.x <Return> {focus .printCanvas.canvasPos.y}
  bind .printCanvas.canvasPos.y <Return> {focus .printCanvas.canvasPos.width}
  bind .printCanvas.canvasPos.width <Return> {focus .printCanvas.canvasPos.height}
  bind .printCanvas.canvasPos.height <Return> {focus .printCanvas.pagePos.pos.x}
  bind .printCanvas.pagePos.pos.x <Return> {focus .printCanvas.pagePos.pos.y}
  bind .printCanvas.pagePos.pos.y <Return> {focus .printCanvas.pagePos.pos.width}
  bind .printCanvas.pagePos.pos.width <Return> {focus .printCanvas.pagePos.pos.height}
  bind .printCanvas.pagePos.pos.height <Return> {.printCanvas.buttons.print invoke}

  .printCanvas.canvasPos.height insert end [winfo height $printCanvasCanvas]
  .printCanvas.canvasPos.width insert end [winfo width $printCanvasCanvas]
  .printCanvas.canvasPos.x insert end {0.0}
  .printCanvas.canvasPos.y insert end {0.0}
  .printCanvas.file.filenameEntry insert end "[winfo name $printCanvas(canvas)].ps"
  .printCanvas.pagePos.pos.height insert end [winfo height $printCanvasCanvas]
  .printCanvas.pagePos.pos.width insert end [winfo width $printCanvasCanvas]
  .printCanvas.pagePos.pos.x insert end [expr (8.5 * 72) / 2.0]
  .printCanvas.pagePos.pos.y insert end [expr (11 * 72) / 2.0]
  .printCanvas.printerFrame.printEntry insert end {|lpr}

  global PrintCanvasOutputDevice
  set PrintCanvasOutputDevice {Printer}
  .printCanvas.printerFrame.printEntry config -state normal
  .printCanvas.file.filenameEntry config -state disabled
  .printCanvas.file.browse config -state disabled
  global PrintCanvasPageAnchor
  set PrintCanvasPageAnchor {center}
  global PrintCanvasPrintRotate
  set PrintCanvasPrintRotate 0

  update idletask
  grab .printCanvas
  tkwait window .printCanvas

}

global argc argv argv0
for {set ia 0} {$ia < $argc} {incr ia} {
  switch -glob -- "[lindex $argv $ia]" {
    -isslave* {
      set IsSlave 1
      fconfigure stdin -buffering line
      fconfigure stdout -buffering line
    }
    -* {
    	puts stderr "usage: $argv0 \[wish options\] -- \[-isslave\]"
	exit 96
    }
  }
}    

while {1} {
  global IsSlave
  if {$IsSlave} {
    puts {102 Withdraw}
    flush stdout
  } else {
    wm withdraw .
  }
  SelectLens
  DisplayLens
}


