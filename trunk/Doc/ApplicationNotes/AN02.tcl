#!/usr/bin/wish
# Generated code: Tue Oct 30 01:46:07 PM EDT 2012
# Generated by: $Id: CTCPanelWindow.tcl 709 2009-05-01 15:20:49Z heller $
# Add your code to the bottom (after the 'Add User code after this line').
#
# -name AN02
# -width 780
# -height 550
# -hascmri no
# -hasazatrax yes
# -simplemode no
# additionalPackages
# Load Tcl/Tk system supplied packages
package require Tk;#		Make sure Tk is loaded
package require BWidget;#       Load BWidgets
package require snit;#		Load Snit

# Load MRR System packages
# Add MRR System package Paths
lappend auto_path /usr/local/lib/MRRSystem;# C++ (binary) packages
lappend auto_path /usr/local/share/MRRSystem;# Tcl (source) packages

package require BWStdMenuBar;#  Load the standard menu bar package
package require MainWindow;#    Load the Main Window package
package require CTCPanel 2.0;#  Load the CTCPanel package (V2)
package require grsupport 2.0;# Load Graphics Support code (V2)

#* 
#* ------------------------------------------------------------------
#* panelCode.tcl - Panel Main Window Creation Library
#* Created by Robert Heller on Sun Apr 13 18:27:24 2008
#* ------------------------------------------------------------------
#* Modification History: $Log$
#* Modification History: Revision 1.1  2002/07/28 14:03:50  heller
#* Modification History: Add it copyright notice headers
#* Modification History:
#* ------------------------------------------------------------------
#* Contents:
#* ------------------------------------------------------------------
#*  
#*     Model RR System, Version 2
#*     Copyright (C) 1994,1995,2002-2005  Robert Heller D/B/A Deepwoods Software
#* 			51 Locke Hill Road
#* 			Wendell, MA 01379-9728
#* 
#*     This program is free software; you can redistribute it and/or modify
#*     it under the terms of the GNU General Public License as published by
#*     the Free Software Foundation; either version 2 of the License, or
#*     (at your option) any later version.
#* 
#*     This program is distributed in the hope that it will be useful,
#*     but WITHOUT ANY WARRANTY; without even the implied warranty of
#*     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#*     GNU General Public License for more details.
#* 
#*     You should have received a copy of the GNU General Public License
#*     along with this program; if not, write to the Free Software
#*     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#* 
#*  
#* 

# $Id: panelCode.tcl 625 2008-04-21 23:39:05Z heller $

snit::type MainWindow {
  pragma -hastypeinfo    no
  pragma -hastypedestroy no
  pragma -hasinstances   no

  typecomponent main
  typecomponent swframe
  typecomponent ctcpanel

  delegate typemethod {ctcpanel *} to ctcpanel
  delegate typemethod {main *} to main
  typemethod createwindow {args} {
    set name [from args -name {}]
    set width [from args -width 800]
    set height [from args -height 800]
    wm protocol . WM_DELETE_WINDOW [mytypemethod CarefulExit]
    wm withdraw .
    wm title . "$name"
    set main [mainwindow .main]
    pack $main -expand yes -fill both
    $main menu entryconfigure file New -state disabled
    $main menu entryconfigure file Open... -state disabled
    $main menu entryconfigure file Save -state disabled
    $main menu entryconfigure file {Save As...} -state disabled
    $main menu entryconfigure file Print... -state disabled
    $main menu entryconfigure file Close -command [mytypemethod CarefulExit]
    $main menu entryconfigure file Exit -command [mytypemethod CarefulExit]
    set frame [$main scrollwindow getframe]
    set swframe [ScrollableFrame $frame.swframe \
			-constrainedheight yes -constrainedwidth yes \
			-width [expr {$width + 15}] -height $height]
    pack $swframe -expand yes -fill both
    $main scrollwindow setwidget $swframe
    set ctcpanel [::CTCPanel::CTCPanel [$swframe getframe].ctcpanel \
			-width $width -height $height]
    pack $ctcpanel -fill both -expand yes
    $main menu add view command \
		-label {Zoom In} \
		-accelerator {+} \
		-command "$ctcpanel zoomBy 2"
    set zoomMenu [menu [$main mainframe getmenu view].zoom -tearoff no]
    $main menu add view cascade \
		-label Zoom \
		-menu $zoomMenu
    $main menu add view command \
		-label {Zoom Out} \
		-accelerator {-} \
		-command "$ctcpanel zoomBy .5"
    $zoomMenu add command -label {16:1} -command "$ctcpanel setZoom 16"
    $zoomMenu add command -label {8:1} -command "$ctcpanel setZoom 8"
    $zoomMenu add command -label {4:1} -command "$ctcpanel setZoom 4"
    $zoomMenu add command -label {2:1} -command "$ctcpanel setZoom 2"
    $zoomMenu add command -label {1:1} -command "$ctcpanel setZoom 1"
    $zoomMenu add command -label {1:2} -command "$ctcpanel setZoom .5"
    $zoomMenu add command -label {1:4} -command "$ctcpanel setZoom .25"
    $zoomMenu add command -label {1:8} -command "$ctcpanel setZoom .125"
    $zoomMenu add command -label {1:16} -command "$ctcpanel setZoom .0625"

    $main showit
  }
  typemethod CarefulExit {{answer no}} {
    if {!$answer} {
      set answer [tk_messageBox -default no -icon question \
			-message {Really Quit?} -title {Careful Exit} \
			-type yesno -parent $main]
      if {$answer} {exit}
    }
  }  
}

MainWindow createwindow -name AN02 -width 780 -height 550
# CTCPanelObjects
MainWindow ctcpanel create StraightBlock SouthT1 \
	-x1 150.0 \
	-y1 220 \
	-x2 580 \
	-y2 220 \
	-controlpoint South \
	-label {} \
	-position below \
	-occupiedcommand {SouthT1_Occ occupiedP}
MainWindow ctcpanel create StraightBlock SouthT2 \
	-x1 150.0 \
	-y1 200 \
	-x2 580 \
	-y2 200 \
	-controlpoint South \
	-label {} \
	-position below \
	-occupiedcommand {SouthT2_Occ occupiedP}
MainWindow ctcpanel create Switch Switch1n \
	-x 110.0 \
	-y 20.0 \
	-label 1n \
	-controlpoint West \
	-orientation 0 \
	-flipped no \
	-statecommand {$::WestTurnoutState} \
	-occupiedcommand {CurveOccupancy WestClockwise WestCounterClockwise
}
MainWindow ctcpanel create CurvedBlock SE1 \
	-x1 620.0 \
	-y1 220.0 \
	-x2 720.0 \
	-y2 120.0 \
	-radius 100 \
	-controlpoint East \
	-label {} \
	-position below \
	-occupiedcommand {CurveOccupancy EastClockwise EastCounterClockwise}
MainWindow ctcpanel create CurvedBlock SW1 \
	-x1 10.0 \
	-y1 120.0 \
	-x2 110.0 \
	-y2 220.0 \
	-radius 100 \
	-controlpoint West \
	-label {} \
	-position below \
	-occupiedcommand {CurveOccupancy WestClockwise WestCounterClockwise}
MainWindow ctcpanel create Switch Switch1s \
	-x 110.0 \
	-y 220.0 \
	-label 1s \
	-controlpoint West \
	-orientation 0 \
	-flipped yes \
	-statecommand {$::WestTurnoutState} \
	-occupiedcommand {CurveOccupancy WestClockwise WestCounterClockwise
}
MainWindow ctcpanel create StraightBlock NorthT1 \
	-x1 150.0 \
	-y1 20 \
	-x2 580 \
	-y2 20 \
	-controlpoint North \
	-label {} \
	-position below \
	-occupiedcommand {NorthT1_Occ occupiedP}
MainWindow ctcpanel create StraightBlock NorthT2 \
	-x1 150.0 \
	-y1 40.0 \
	-x2 580 \
	-y2 40 \
	-controlpoint North \
	-label {} \
	-position below \
	-occupiedcommand {NorthT2_Occ occupiedP}
MainWindow ctcpanel create Switch Switch2n \
	-x 620.0 \
	-y 20 \
	-label 2n \
	-controlpoint East \
	-orientation 4 \
	-flipped yes \
	-statecommand {$::EastTurnoutState} \
	-occupiedcommand {CurveOccupancy EastClockwise EastCounterClockwise}
MainWindow ctcpanel create CurvedBlock NE1 \
	-x1 720.0 \
	-y1 120.0 \
	-x2 620.0 \
	-y2 20.0 \
	-radius 100 \
	-controlpoint East \
	-label {} \
	-position below \
	-occupiedcommand {CurveOccupancy EastClockwise EastCounterClockwise}
MainWindow ctcpanel create CurvedBlock NW1 \
	-x1 110 \
	-y1 20 \
	-x2 10 \
	-y2 120 \
	-radius 100 \
	-controlpoint West \
	-label {} \
	-position below \
	-occupiedcommand {CurveOccupancy WestClockwise WestCounterClockwise}
MainWindow ctcpanel create Switch Switch2s \
	-x 620.0 \
	-y 220.0 \
	-label 2s \
	-controlpoint East \
	-orientation 4 \
	-flipped no \
	-statecommand {$::EastTurnoutState} \
	-occupiedcommand {CurveOccupancy EastClockwise EastCounterClockwise}

package require Azatrax
# Azatrax Nodes
# West End control
SR4 WestControl -this [Azatrax_OpenDevice 003 $::Azatrax_idSR4Product]
# East end clockwise sensor
MRD EastClockwise -this [Azatrax_OpenDevice 005 $::Azatrax_idMRDProduct]
# East end counter clockwise sensor
MRD EastCounterClockwise -this [Azatrax_OpenDevice 004 $::Azatrax_idMRDProduct]
# East end control
SR4 EastControl -this [Azatrax_OpenDevice 006 $::Azatrax_idSR4Product]
# West end clockwise sensor pair
MRD WestClockwise -this [Azatrax_OpenDevice 001 $::Azatrax_idMRDProduct]
# West end counterclockwise sensor pair
MRD WestCounterClockwise -this [Azatrax_OpenDevice 002 $::Azatrax_idMRDProduct]

# Add User code after this line
proc CurveOccupancy {CW_Sensor CCW_Sensor} {
  if {[$CW_Sensor Sense_1] ||
      [$CW_Sensor Latch_1] ||
      [$CW_Sensor Sense_2]} {
    return yes
  } elseif {[$CCW_Sensor Sense_1] ||
	    [$CCW_Sensor Latch_1] ||
	    [$CCW_Sensor Sense_2]} {
    return yes
  } else {
    return no
  }
}

snit::type StraightOccupancy {
  option -enter_sense -readonly yes -default {}
  option -exit_sense -readonly yes -default {}
  variable state unknown
  constructor {args} {
    $self configurelist $args
  }
  method occupiedP {} {
    switch $state {
      exited {
	if {[$options(-enter_sense) Sense_2]} {
	  set state entering
	  set occupied yes
	} else {
	  set occupied no
	}
      }
      entering {
	if {[$options(-enter_sense) Latch_2]} {
	  set state entered
	}
        set occupied yes
      }
      entered {
	if {[$options(-exit_sense) Sense_1]} {
	  set state exiting
	}
	set occupied yes
      }
      exiting {
	if {[$options(-exit_sense) Latch_1]} {
	  set state exited
	  set occupied no
	} else {
	  set occupied yes
	}
      }
      default {
	if {[$options(-enter_sense) Sense_2]} {
	  set state entering
	  set occupied yes
	} elseif {[$options(-enter_sense) Latch_2]} {
	  set state entered
	  set occupied yes
	} elseif {[$options(-exit_sense) Sense_1]} {
	  set state exiting
	  set occupied yes
        } elseif {[$options(-exit_sense) Latch_1]} {
	  set state exited
	  set occupied no 
	} else {
	  set occupied no
	}
      }
    }
    return $occupied
  }
}

StraightOccupancy create SouthT1_Occ -enter_sense WestCounterClockwise \
				     -exit_sense  EastCounterClockwise
StraightOccupancy create SouthT2_Occ -enter_sense EastClockwise \
				     -exit_sense  WestClockwise
StraightOccupancy create NorthT1_Occ -enter_sense EastCounterClockwise \
				     -exit_sense  WestCounterClockwise
StraightOccupancy create NorthT2_Occ -enter_sense WestClockwise \
				     -exit_sense  EastClockwise

global WestTurnoutState 
WestControl PulseRelays 0 1 0 0 4
WestControl RelaysOff   0 0 1 0
set WestTurnoutState normal

global EastTurnoutState 
EastControl PulseRelays 0 1 0 0 4
EastControl RelaysOff   0 0 1 0
set EastTurnoutState normal

# Main Loop Start
while {true} {
  # Read all AZATRAX state data
  WestControl GetStateData
  EastClockwise GetStateData
  EastCounterClockwise GetStateData
  EastControl GetStateData
  WestClockwise GetStateData
  WestCounterClockwise GetStateData
  # Invoke all trackwork and get occupicency
  MainWindow ctcpanel invoke SouthT1
  MainWindow ctcpanel invoke SouthT2
  MainWindow ctcpanel invoke SE1
  MainWindow ctcpanel invoke Switch1n
  MainWindow ctcpanel invoke SW1
  MainWindow ctcpanel invoke Switch1s
  MainWindow ctcpanel invoke NorthT1
  MainWindow ctcpanel invoke NorthT2
  MainWindow ctcpanel invoke Switch2n
  MainWindow ctcpanel invoke NE1
  MainWindow ctcpanel invoke NW1
  MainWindow ctcpanel invoke Switch2s

  # Has a clockwise train arrived at the west end single track segment?
  if {[WestClockwise Sense_1]} {
    # Check for opposing movement
    if {![WestCounterClockwise Sense_1] &&
	![WestCounterClockwise Sense_2] &&
	![WestCounterClockwise Latch_1]} {
      # single track segment is clear
      WestControl PulseRelays 1 0 0 0 4;# Throw turnout 
      WestControl RelaysOn    0 0 1 0;# Set relay
      set WestTurnoutState reverse
    }
  }

  # Has a counterclockwise train arrived at the west end single track segment?
  if {[WestCounterClockwise Sense_1]} {
    # Check for opposing movement
    if {![WestClockwise Sense_1] &&
	![WestClockwise Sense_2] &&
	![WestClockwise Latch_1]} {
      # single track segment is clear
      WestControl PulseRelays 0 1 0 0 4;# Throw turnout 
      WestControl RelaysOff   0 0 1 0;# Unset relay
      set WestTurnoutState normal
    }
  }

  # Has a clockwise train arrived at the east end single track segment?
  if {[EastClockwise Sense_1]} {
    # Check for opposing movement
    if {![EastCounterClockwise Sense_1] &&
	![EastCounterClockwise Sense_2] &&
	![EastCounterClockwise Latch_1]} {
      # single track segment is clear
      EastControl PulseRelays 0 1 0 0 4;# Throw turnout 
      EastControl RelaysOff   0 0 1 0;# Unset relay
      set EastTurnoutState normal
    }
  }

  # Has a counterclockwise train arrived at the east end single track segment?
  if {[EastCounterClockwise Sense_1]} {
    # Check for opposing movement
    if {![EastClockwise Sense_1] &&
	![EastClockwise Sense_2] &&
	![EastClockwise Latch_1]} {
      # single track segment is clear
      EastControl PulseRelays 1 0 0 0 4;# Throw turnout 
      EastControl RelaysOff   0 0 1 0;# Unset relay
      set EastTurnoutState reverse
    }
  }


  update;# Update display
}
# Main Loop End

 

