#!/usr/bin/wish
# Generated code: Thu Jul 30 15:43:40 EDT 2015
# Generated by: $Id: CTCPanelWindow.tcl 709 2009-05-01 15:20:49Z heller $
# Add your code to the bottom (after the 'Add User code after this line').
#
# -name {Fox Yard}
# -width 780
# -height 550
# -hascmri yes
# -cmriport /dev/ttyUSS0
# -cmrispeed 9600
# -cmriretries 10000
# -hasazatrax no
# -simplemode no
# additionalPackages
# Load Tcl/Tk system supplied packages
package require Tk;#		Make sure Tk is loaded
package require tile;#          Load tile
package require snit;#		Load Snit

# Load MRR System packages
# Add MRR System package Paths
lappend auto_path /usr/local/lib/MRRSystem;# C++ (binary) packages
lappend auto_path /usr/local/share/MRRSystem;# Tcl (source) packages

package require snitStdMenuBar;#  Load the standard menu bar package
package require LabelFrames;#   Label frame widgets
package require MainFrame;#     Main Frame widget
package require ScrollableFrame;#     Scrollable Frame widget
package require MainWindow;#    Load the Main Window package
package require CTCPanel 2.0;#  Load the CTCPanel package (V2)
package require grsupport 2.0;# Load Graphics Support code (V2)

#* 
#* ------------------------------------------------------------------
#* panelCode.tcl - Panel Main Window Creation Library
#* Created by Robert Heller on Sun Apr 13 18:27:24 2008
#* ------------------------------------------------------------------
#* Modification History: $Log$
#* Modification History: Revision 1.1  2002/07/28 14:03:50  heller
#* Modification History: Add it copyright notice headers
#* Modification History:
#* ------------------------------------------------------------------
#* Contents:
#* ------------------------------------------------------------------
#*  
#*     Model RR System, Version 2
#*     Copyright (C) 1994,1995,2002-2005  Robert Heller D/B/A Deepwoods Software
#* 			51 Locke Hill Road
#* 			Wendell, MA 01379-9728
#* 
#*     This program is free software; you can redistribute it and/or modify
#*     it under the terms of the GNU General Public License as published by
#*     the Free Software Foundation; either version 2 of the License, or
#*     (at your option) any later version.
#* 
#*     This program is distributed in the hope that it will be useful,
#*     but WITHOUT ANY WARRANTY; without even the implied warranty of
#*     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#*     GNU General Public License for more details.
#* 
#*     You should have received a copy of the GNU General Public License
#*     along with this program; if not, write to the Free Software
#*     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#* 
#*  
#* 

# $Id: panelCode.tcl 625 2008-04-21 23:39:05Z heller $

snit::type MainWindow {
  pragma -hastypeinfo    no
  pragma -hastypedestroy no
  pragma -hasinstances   no

  typecomponent main
  typecomponent swframe
  typecomponent ctcpanel

  delegate typemethod {ctcpanel *} to ctcpanel
  delegate typemethod {main *} to main
  typemethod createwindow {args} {
    set name [from args -name {}]
    set width [from args -width 800]
    set height [from args -height 800]
    wm protocol . WM_DELETE_WINDOW [mytypemethod CarefulExit]
    wm withdraw .
    wm title . "$name"
    set main [mainwindow .main]
    pack $main -expand yes -fill both
    $main menu entryconfigure file New -state disabled
    $main menu entryconfigure file Open... -state disabled
    $main menu entryconfigure file Save -state disabled
    $main menu entryconfigure file {Save As...} -state disabled
    $main menu entryconfigure file Print... -state disabled
    $main menu entryconfigure file Close -command [mytypemethod CarefulExit]
    $main menu entryconfigure file Exit -command [mytypemethod CarefulExit]
    set frame [$main scrollwindow getframe]
    set swframe [ScrollableFrame $frame.swframe \
			-constrainedheight yes -constrainedwidth yes \
			-width [expr {$width + 15}] -height $height]
    $main scrollwindow setwidget $swframe
    set ctcpanel [::CTCPanel::CTCPanel [$swframe getframe].ctcpanel \
			-width $width -height $height]
    pack $ctcpanel -fill both -expand yes
    $main menu add view command \
		-label {Zoom In} \
		-accelerator {+} \
		-command "$ctcpanel zoomBy 2"
    set zoomMenu [menu [$main mainframe getmenu view].zoom -tearoff no]
    $main menu add view cascade \
		-label Zoom \
		-menu $zoomMenu
    $main menu add view command \
		-label {Zoom Out} \
		-accelerator {-} \
		-command "$ctcpanel zoomBy .5"
    $zoomMenu add command -label {16:1} -command "$ctcpanel setZoom 16"
    $zoomMenu add command -label {8:1} -command "$ctcpanel setZoom 8"
    $zoomMenu add command -label {4:1} -command "$ctcpanel setZoom 4"
    $zoomMenu add command -label {2:1} -command "$ctcpanel setZoom 2"
    $zoomMenu add command -label {1:1} -command "$ctcpanel setZoom 1"
    $zoomMenu add command -label {1:2} -command "$ctcpanel setZoom .5"
    $zoomMenu add command -label {1:4} -command "$ctcpanel setZoom .25"
    $zoomMenu add command -label {1:8} -command "$ctcpanel setZoom .125"
    $zoomMenu add command -label {1:16} -command "$ctcpanel setZoom .0625"

    $main showit
  }
  typemethod CarefulExit {{answer no}} {
    if {!$answer} {
      set answer [tk_messageBox -default no -icon question \
			-message {Really Quit?} -title {Careful Exit} \
			-type yesno -parent $main]
      if {$answer} {exit}
    }
  }  
}

MainWindow createwindow -name {Fox Yard} -width 780 -height 550
# CTCPanelObjects
MainWindow ctcpanel create SWPlate TG11Plate \
	-x 290.0 \
	-y 100 \
	-label 11 \
	-controlpoint FOX \
	-normalcommand {} \
	-reversecommand {}
MainWindow ctcpanel create StraightBlock FOXYard-1 \
	-x1 387.0 \
	-y1 168.0 \
	-x2 430.0 \
	-y2 168.0 \
	-controlpoint FOX \
	-label {} \
	-position above \
	-occupiedcommand {}
MainWindow ctcpanel create Switch TG10 \
	-x 50.0 \
	-y 210.0 \
	-label 10 \
	-controlpoint DONALDSON \
	-orientation 4 \
	-flipped no \
	-statecommand {} \
	-occupiedcommand {}
MainWindow ctcpanel create StraightBlock FOXYard-2 \
	-x1 367.0 \
	-y1 188.0 \
	-x2 387.0 \
	-y2 168.0 \
	-controlpoint FOX \
	-label {} \
	-position above \
	-occupiedcommand {}
MainWindow ctcpanel create StraightBlock BK18-1 \
	-x1 370.0 \
	-y1 210.0 \
	-x2 590.0 \
	-y2 210.0 \
	-controlpoint FOX \
	-label BK18 \
	-position above \
	-occupiedcommand {}
MainWindow ctcpanel create Signal SIG20RABC \
	-x 275.0 \
	-y 225.0 \
	-label {} \
	-controlpoint FOX \
	-orientation 0 \
	-heads 3
MainWindow ctcpanel create Switch TG11 \
	-x 280.0 \
	-y 210.0 \
	-label 11 \
	-controlpoint FOX \
	-orientation 0 \
	-flipped yes \
	-statecommand {} \
	-occupiedcommand {}
MainWindow ctcpanel create Switch TF12 \
	-x 325.0 \
	-y 210.0 \
	-label 12 \
	-controlpoint FOX \
	-orientation 0 \
	-flipped yes \
	-statecommand {} \
	-occupiedcommand {}
MainWindow ctcpanel create CurvedBlock BK18-2 \
	-x1 590.0 \
	-y1 210.0 \
	-x2 630.0 \
	-y2 170.0 \
	-radius 40 \
	-controlpoint FOX \
	-label {} \
	-position above \
	-occupiedcommand {}
MainWindow ctcpanel create StraightBlock BK18-3 \
	-x1 630 \
	-y1 170 \
	-x2 630.0 \
	-y2 80.0 \
	-controlpoint FOX \
	-label {} \
	-position above \
	-occupiedcommand {}
MainWindow ctcpanel create Signal SIG16LA \
	-x 136.0 \
	-y 196.0 \
	-label {} \
	-controlpoint BK16 \
	-orientation 4 \
	-heads 1
MainWindow ctcpanel create StraightBlock BK17 \
	-x1 225.0 \
	-y1 210.0 \
	-x2 275.0 \
	-y2 210.0 \
	-controlpoint BK17 \
	-label BK17 \
	-position above \
	-occupiedcommand {}
MainWindow ctcpanel create CurvedBlock BK18-4 \
	-x1 630 \
	-y1 80 \
	-x2 590 \
	-y2 40 \
	-radius 40 \
	-controlpoint FOX \
	-label {} \
	-position above \
	-occupiedcommand {}
MainWindow ctcpanel create StraightBlock BK18-5 \
	-x1 590.0 \
	-y1 40.0 \
	-x2 470.0 \
	-y2 40.0 \
	-controlpoint FOX \
	-label {} \
	-position above \
	-occupiedcommand {}
MainWindow ctcpanel create Signal SIG18LA \
	-x 219.0 \
	-y 197.0 \
	-label {} \
	-controlpoint BK17 \
	-orientation 4 \
	-heads 1
MainWindow ctcpanel create StraightBlock BK18-6 \
	-x1 470.0 \
	-y1 40.0 \
	-x2 320.0 \
	-y2 190.0 \
	-controlpoint FOX \
	-label {} \
	-position above \
	-occupiedcommand {}
MainWindow ctcpanel create SWPlate TG10Plate \
	-x 40.0 \
	-y 100 \
	-label 10 \
	-controlpoint DONALDSON \
	-normalcommand {} \
	-reversecommand {}
MainWindow ctcpanel create Signal SIG20LA \
	-x 420.0 \
	-y 200.0 \
	-label {} \
	-controlpoint FOX \
	-orientation 4 \
	-heads 1
MainWindow ctcpanel create StraightBlock BK15 \
	-x1 55.0 \
	-y1 210.0 \
	-x2 135.0 \
	-y2 210.0 \
	-controlpoint DONALDSON \
	-label BK15 \
	-position above \
	-occupiedcommand {}
MainWindow ctcpanel create Signal SIG20LB \
	-x 335.0 \
	-y 155.0 \
	-label {} \
	-controlpoint FOX \
	-orientation 3 \
	-heads 1
MainWindow ctcpanel create StraightBlock BK16 \
	-x1 138.0 \
	-y1 210.0 \
	-x2 220.0 \
	-y2 210.0 \
	-controlpoint BK16 \
	-label BK16 \
	-position above \
	-occupiedcommand {}
MainWindow ctcpanel create Signal SIG16RA \
	-x 137.0 \
	-y 225.0 \
	-label {} \
	-controlpoint BK16 \
	-orientation 0 \
	-heads 1
MainWindow ctcpanel create Signal SIG20LD \
	-x 372.0 \
	-y 168.0 \
	-label {} \
	-controlpoint FOX \
	-orientation 3 \
	-heads 1
MainWindow ctcpanel create StubYard FOXYard \
	-x 431.0 \
	-y 168.0 \
	-label {} \
	-controlpoint FOX \
	-orientation 0 \
	-flipped yes \
	-occupiedcommand {} \
	-position below
MainWindow ctcpanel create Signal SIG14LAB \
	-x 53.0 \
	-y 197.0 \
	-label {} \
	-controlpoint DONALDSON \
	-orientation 4 \
	-heads 2
MainWindow ctcpanel create Signal SIG18RA \
	-x 225.0 \
	-y 225.0 \
	-label {} \
	-controlpoint BK11 \
	-orientation 0 \
	-heads 1
#* 
#* ------------------------------------------------------------------
#* cmriCode.tcl - CM/RI Library
#* Created by Robert Heller on Sun Apr 13 18:02:03 2008
#* ------------------------------------------------------------------
#* Modification History: $Log$
#* Modification History: Revision 1.1  2002/07/28 14:03:50  heller
#* Modification History: Add it copyright notice headers
#* Modification History:
#* ------------------------------------------------------------------
#* Contents:
#* ------------------------------------------------------------------
#*  
#*     Model RR System, Version 2
#*     Copyright (C) 1994,1995,2002-2005  Robert Heller D/B/A Deepwoods Software
#* 			51 Locke Hill Road
#* 			Wendell, MA 01379-9728
#* 
#*     This program is free software; you can redistribute it and/or modify
#*     it under the terms of the GNU General Public License as published by
#*     the Free Software Foundation; either version 2 of the License, or
#*     (at your option) any later version.
#* 
#*     This program is distributed in the hope that it will be useful,
#*     but WITHOUT ANY WARRANTY; without even the implied warranty of
#*     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#*     GNU General Public License for more details.
#* 
#*     You should have received a copy of the GNU General Public License
#*     along with this program; if not, write to the Free Software
#*     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#* 
#*  
#* 

# $Id: cmriCode.tcl 680 2009-01-07 22:53:14Z heller $

package require Cmri 2.0.0 ;#          Load the CMR/I package.
package require grsupport 2.0

# Snit type to implement a CMR/I node. 
snit::type CMriNode {
  typecomponent CMriBusObject;#		CMR/I I/O object
  typeconstructor {set CMriBusObject {}}
  typemethod open {port speed retries} {
    set CMriBusObject [CMri %%AUTO%% $port -baud  $speed -maxtries $retries]
  }
  typemethod close {} {
    if {[string length "$CMriBusObject"] > 0} {$CMriBusObject destroy}
    set CMriBusObject {}
  }
  # Define the integer verify method.
  GRSupport::VerifyIntegerMethod
  # options used by CMR/I nodes.
  option -ns -default 0 -readonly yes \
	 -validatemethod _VerifyInteger
  option -ni -default 0 -readonly yes \
	 -validatemethod _VerifyInteger
  option -no -default 0 -readonly yes \
	 -validatemethod _VerifyInteger
  option -dl -default 0 -readonly yes \
	 -validatemethod _VerifyInteger
  option -ct -default {} -readonly yes
  variable UA;#				This node's address
    
  constructor {_UA NodeType args} {
    cmri::uatype $_UA;#			Validate the address
    set UA $_UA;#			Stash our address
    $self configurelist $args;#		configure options
    # Determine type of node.
    cmri::CardType validate $NodeType;#	Validate the card type
    switch -exact -- $NodeType {
      SUSIC {set ctype SUSIC}
      USIC  {set ctype USIC}
      SMINI {set ctype SMINI
	     set options(-ni) 3
	     set options(-no) 6
	     set options(-dl) 0}
      default {
	error "Unknown Node Type: $NodeType"
      }
    }
    # Initialize our board.
    $CMriBusObject InitBoard $options(-ct) $options(-ni) \
			       $options(-no) $options(-ns) \
			       $UA $ctype $options(-dl)
  }
  # Input method -- poll our input ports
  method inputs {} {
    return [$CMriBusObject Inputs $options(-ni) $UA]
  }
  # Output method -- write to our output ports
  method outputs {args} {
    return [$CMriBusObject Outputs $args $UA]
  }
}


  


CMriNode open /dev/ttyUSS0 9600 10000
# CMRIBoards

# Add User code after this line

